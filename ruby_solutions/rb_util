#!/usr/bin/env ruby
# frozen_string_literal: true

require "thor"

# Utility class for generating running and testing
# clone of advent of code util
# https://github.com/ConorSheehan1/advent_of_code_2018/blob/92672e50f17d24f5b08d0342fa799478a38544b8/aoc
class RbUtil < Thor
  include Thor::Actions

  # https://github.com/erikhuda/thor/wiki/Generators
  def self.source_root
    File.dirname(__FILE__)
  end

  # https://github.com/erikhuda/thor/issues/120
  desc "generate file_name", "Generate a src and test file for a given file_name"
  # @param [String] file_name
  def generate(file_name)
    opts = { file_name: file_name }
    template("templates/src.tt", "src/#{file_name}.rb", opts)
    template("templates/spec.tt", "spec/#{file_name}_spec.rb", opts)
  end

  desc "destroy file_name", "Delete the src and test file for a given file_name"
  # @param [String] file_name
  def destroy(file_name)
    files = ["src/#{file_name}.rb", "spec/#{file_name}_spec.rb"]
    files.each do |f|
      if File.exist?(f)
        File.delete(f) if confirm("delete #{f}")
      else
        say("#{f} does not exist", :red)
      end
    end
  end

  desc "to_screen file_name INPUT (default=in/file_name.txt)", "Send output to the console"
  # @param [String] file_name
  # @param [String] input
  def to_screen(file_name, input = nil)
    with_output(file_name, input) do |output|
      puts(output)
    end
  end

  # @param [String] file_name
  # @param [String] input
  desc "to_file file_name INPUT (default=in/$file_name.txt)", "Send output to a file"
  def to_file(file_name, input = nil)
    out_f = "out/#{file_name}.txt"
    confirm("#{out_f} already exists. Overwrite") if File.exist?(out_f)
    puts("writing to #{out_f}")

    File.open("out/#{file_name}.txt", "w") do |f|
      with_output(file_name, input) do |output|
        f.write(output)
      end
    end
  end

  # @param [String] file_name
  desc "spec file_name", "Run tests for a given file_name"
  def spec(file_name)
    system("bundle exec rspec spec/#{file_name}_spec.rb")
  end

  map "to_sc" => "to_screen"
  map "to_f"  => "to_file"
  map "g"     => "generate"
  map "d"     => "destroy"

  private

    # @param [String] file_name
    # @param [String] input
    def with_output(file_name, _input)
      require_relative "src/#{file_name}.rb"
      func = method("solution_#{file_name}".to_sym)
      results = func.call
      yield(results)
    end

    # @param [String] message
    # @return [Boolean]
    def confirm(message)
      loop do
        say("#{message}? y/n", :yellow)
        answer = STDIN.gets.chomp
        return false if answer == "n"
        return true if answer == "y"
      end
    end
end

RbUtil.start
